{
  "pages": [
    {
      "text": "Bir konuyu \u00f6\u011frenmeye ba\u015flaman\u0131n kendine g\u00f6re zorluklar\u0131 vard\u0131r. Bunlar\u0131n en ba\u015f\u0131nda, \u00e7al\u0131\u015fma plan\u0131na karar verilmesi gelir. \u00d6zellikle, internettin kaynak kaynad\u0131\u011f\u0131 \u015fu zamanlarda, as\u0131l s\u0131k\u0131nt\u0131 kaynak bulmakdan \u00f6te, hangi kaynaklar\u0131n hangi s\u0131rada kullan\u0131lmas\u0131 gerekti\u011fi sorusudur. E\u011fer siz de benim gibi, bol bol internetten bir\u015feyler \u00f6\u011frenmeye \u00e7al\u0131\u015fan bir insansan\u0131z, muhtemelen bir \u00f6\u011fretmenin eksikli\u011fini hissetmi\u015fsinizdir. Onca materyalin i\u00e7erisinde size rehberlik edip yol g\u00f6sterecek kimse yoktur ve belki de bo\u011fuldu\u011funuzu hissedersiniz.\nBu yaz\u0131da, internetten Python \u00f6\u011frenmeye \u00e7al\u0131\u015fan, ancak, kendine \u00e7al\u0131\u015fma plan\u0131 haz\u0131rlamakta zorluk \u00e7eken kimselere, kendi deneyimlerimden ve \u015fu ana kadar \u00f6\u011frenmeye muktedir oldu\u011fum bilgilerden yola \u00e7\u0131karara, k\u0131sa bir \u00e7al\u0131\u015fma rehberi haz\u0131rlamak istiyorum. Bununla birlikte, \u015funun da fark\u0131nday\u0131m ki, herkesin \u00f6\u011frenme \u00fcslubu ve ihtiya\u00e7lar\u0131 farkl\u0131l\u0131k g\u00f6sterecektir. Bu yaz\u0131y\u0131 yazarken, bu tarz farkl\u0131l\u0131klar\u0131 da ak\u0131lda bulundurmaya \u00e7al\u0131\u015faca\u011f\u0131m.\nG\u00f6rebildi\u011fim kadar\u0131yla, Python \u00f6\u011frenmeye ba\u015flayanlar\u0131n kafalar\u0131na tak\u0131lan ilk soru, hangi Python s\u00fcr\u00fcm\u00fcn\u00fc \u00f6\u011frenmeleri gerekti\u011fidir. Bu soruyla ilgili en b\u00fcy\u00fck problem, sorunun cevab\u0131n\u0131n zaman i\u00e7inde \u00e7ok h\u0131zl\u0131 bir \u015fekilde de\u011fi\u015febilecek olmas\u0131. Buna daha \u00f6nce farkl\u0131 tarih ve muhitlerde verdi\u011fim cevaplar bile, birbirini tutmuyor. Bu sebeple, bu soruya bir cevap vermek yerine, konuya nas\u0131l yakla\u015f\u0131lmas\u0131 gerekti\u011fini, kendi bak\u0131\u015f a\u00e7\u0131ma g\u00f6re, yazaca\u011f\u0131m.\nBence bu de\u011ferlendirmeyi yaparken kullan\u0131lmas\u0131 gereken ilk mikyas, kulland\u0131\u011f\u0131n\u0131z i\u015fletim sistemi ve ara\u00e7lar olacakt\u0131r. E\u011fer linux kullan\u0131yorsan\u0131z, cidden b\u00fcy\u00fck bir ihtimalle, bilgisayar\u0131n\u0131zda belli bir Python s\u00fcr\u00fcm\u00fc y\u00fckl\u00fc olacakt\u0131r. Oradan ba\u015flay\u0131n derim, \u00e7\u00fcnk\u00fc, bilgisayardaki Python s\u00fcr\u00fcm\u00fcn\u00fc de\u011fi\u015ftirmek, muhtemelen o anda u\u011fra\u015fmak istemeyece\u011finiz t\u00fcrl\u00fc s\u0131k\u0131nt\u0131lar\u0131 da beraberinde getirecektir. S\u00fcr\u00fcmler aras\u0131ndaki farkl\u0131l\u0131klar, s\u0131f\u0131rdan Python \u00f6\u011frenirken, o kadar da dikkat \u00e7ekici olmad\u0131\u011f\u0131ndan, bu a\u015famada s\u00fcr\u00fcm de\u011fi\u015ftirmek u\u011fra\u015f\u0131na girmeye de\u011fmeyece\u011fini d\u00fc\u015f\u00fcn\u00fcyorum. Bu kriter ayn\u0131 \u015fekilde, okulda ders olarak veya dersin bir par\u00e7as\u0131 olarak Python \u00f6\u011frenenler i\u00e7in de ge\u00e7erli bence. Hocan\u0131z hangi s\u00fcr\u00fcm\u00fc kullan\u0131yorsa, siz de \u00f6nce onu \u00f6\u011frenin.\nAncak bilgisayar\u0131n\u0131zda, haz\u0131r bir Python s\u00fcr\u00fcm\u00fc yoksa, Python \u00f6\u011frenmekteki te\u015fvikiniz \u00f6nemli bir kriter olabilir. E\u011fer elinizde belli bir kod taban\u0131 varsa, ve bu kod taban\u0131 size emanet edildi\u011fi i\u00e7in Python \u00f6\u011freniyor iseniz, haliyle o s\u00fcr\u00fcmle ba\u015flamak i\u015finize gelecektir.\nE\u011fer yukar\u0131daki \u015fartlar size uymuyorsa, Python 3 ile ba\u015flaman\u0131z\u0131 tavsiye ederim. \u00d6nceleri, Python 2'yi tavsiye ediyordum. Ancak, Python 3 art\u0131k yeterince olgunla\u015ft\u0131 ve g\u00f6rebildi\u011fim kadar\u0131yla, 3'e ge\u00e7i\u015f s\u00fcreci ivme kazanm\u0131\u015f durumda. Ayr\u0131ca, Python 3 ile ba\u015flam\u0131\u015f olman\u0131z, Python 2 ile ilgili her\u015feyi geride b\u0131rakmak anlam\u0131na gelmiyor. A\u015fa\u011f\u0131da sunaca\u011f\u0131m \u00e7al\u0131\u015fma plan\u0131nda, iki s\u00fcr\u00fcm\u00fc birden kullanmaya ba\u015flaman\u0131z\u0131n uygun oldu\u011fu zamandan bahsedece\u011fim.\nGenel Konseptler\nBu k\u0131s\u0131m, genel olarak Python kaynaklar\u0131nda bulamad\u0131\u011f\u0131m bir k\u0131s\u0131m. \u00d6zellikle benim gibi t\u00fcmden gelim y\u00f6ntemiyle \u00e7al\u0131\u015fmay\u0131 sevenler i\u00e7in, ihtiya\u00e7 duyulan bir konu ba\u015fl\u0131\u011f\u0131 oldu\u011fu d\u00fc\u015f\u00fcn\u00fcyorum. Bu k\u0131s\u0131mda, Python dilinin temellerini olu\u015fturan kavramlardan bahsedece\u011fim.\nPython makine diline derlenmez\nPython ile yazm\u0131\u015f oldu\u011funuz programlar, Python sanal makinesi taraf\u0131ndan yorumlan\u0131r. E\u011fer bunun ne demek oldu\u011fu konusunda pek bir fikriniz yoksa, \u015funu bilmeniz yeterli, Python programlar\u0131n\u0131 \u00e7al\u0131\u015ft\u0131rmak i\u00e7in, bir Python yorumlay\u0131c\u0131s\u0131na ihtiyac\u0131n\u0131z olacakt\u0131r. Her ne kadar \u00e7e\u015fitli Python yorumlay\u0131c\u0131lar\u0131 olsa da, \u00f6zellikle aksi belirtilmedi\u011fi takdirde, Python deyince akla, resmi Python yorumlay\u0131c\u0131s\u0131 gelir.\nBu ayn\u0131 zamanda, makine seviyesinde i\u015flemler yapmak isteyenler i\u00e7in, Python'un uygun bir dil olmad\u0131\u011f\u0131 anlam\u0131na gelir.\nPython'un makine diline derlenmiyor olu\u015fu, \u015fu anda girmeyece\u011fim teknik detaylar nedeniyle, performans\u0131na da etki eder. Bu performans fark\u0131, \u00e7o\u011fu zaman \u00f6nemsenmeyecek derecede olsa da, \u00f6nemli oldu\u011fu noktalarda, yeri geldi\u011fince bahsedilebilir.\nBu yaz\u0131n\u0131n konusu olmad\u0131\u011f\u0131 i\u00e7in, alternatif Python derleyecilerine girmeyece\u011fim. Ba\u015fka bir zaman, ondan da bahsedilebilir.\nPython de\u011fi\u015fkenleri ve Mutable kavram\u0131\nBu k\u0131s\u0131m, \u00f6zellikle programlamaya yeni ba\u015flayanlar i\u00e7in fazla teknik gelebilir. E\u011fer bu konsepti anlamazsan\u0131z, \u00fczerinde fazla durman\u0131za gerek yok, daha sonra tekrar d\u00f6nebilirsiniz.\nPython'da, \u00f6zellikle Python'la birlikte gelen k\u00fct\u00fcphanelerde, iki \u00e7e\u015fit veri t\u00fcr\u00fc vard\u0131r. Bunlar, yerinde de\u011fi\u015ftirilebilen ve yerinde de\u011fi\u015ftirilemeyen olarak ikiye ayr\u0131l\u0131r. E\u011fer buna dikkat etmezseniz, \u00e7ok can s\u0131k\u0131c\u0131 hatalarla kar\u015f\u0131la\u015fabilirsiniz. Bunlar\u0131, de\u011fi\u015fkenlerle birlikte anlataca\u011f\u0131m i\u00e7in, biraz da de\u011fi\u015fkenlere de\u011fineyim.\nPython'daki de\u011fi\u015fkenler, haf\u0131zadaki bir objeye i\u015faret eder. C bilenler i\u00e7in ba\u015ftan belirteyim, C'deki pointerlardan farkl\u0131d\u0131r. Bunu bir \u00f6rnekle anlatay\u0131m.\na = [1, 2, 3]\nb = a\na.append(4)\nprint(\"a =\", a)\nprint(\"b =\", b)\n\n\n\nProgram \u00e7\u0131kt\u0131s\u0131;\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\n\n\n\na = [1, 2, 3], i\u00e7inde 3 eleman olan bir liste olu\u015ftur ve a ismi de bu objeden bahsetsin demek. \u015euna dikkat edin, a objenin bir ismidir. Bir objenin, birden fazla ismi olabilir. \u0130stedi\u011finiz ismini kullanarak, obje \u00fczerinde i\u015flem yapabilirsiniz.\nb = a, b ismi, a ile ayn\u0131 objeden bahsetsin demek.\na.append(4), ismi a olan listenin sonuna, 4 ekle demek.\nDaha sonra, ekrana a ve b de\u011ferlerini bast\u0131rd\u0131\u011f\u0131m\u0131zda, ayn\u0131 listeyi g\u00f6r\u00fcyoruz, \u00e7\u00fcnk\u00fc a ve b, ayn\u0131 objenin iki farkl\u0131 ismi. \u015eimdi de fakl\u0131 bir \u00f6rne\u011fe bakal\u0131m;\na = \"yasar\"\nb = a\na += \" arabaci\"\nprint(a)\nprint(b)\n\n\n\nBu program\u0131n \u00e7\u0131kt\u0131s\u0131na bakarsak, a ekrana yasar arabaci, b ise yasar olarak bas\u0131lacak. Dikkat ederseniz, bir \u00f6nceki \u00f6rne\u011fin tersine, a ve b de\u011ferleri birbirinden farkl\u0131. Bunun nedeni, Python'da karakter dizilerinin Mutable olmamas\u0131, yani kendi \u00fczerinde de\u011fi\u015fiklik yap\u0131lamamas\u0131. Yukar\u0131daki \u00f6rnekte, \u015fu oluyor;\na ---> \"yasar\" (a ismi, haf\u0131zadaki bu karakter dizisinden bahsetsin)\nb ------      (b ismi de haf\u0131zadaki bu karakter dizisinden bahsetsin)\na -----> \"yasar arabaci\" (a ismi, haf\u0131zadaki bu yeni karakter dizisinden bahsetsin)\nYani, Python karakter dizisini yerinde de\u011fi\u015ftiremedi\u011fi i\u00e7in, a += \" arabaci\" sat\u0131r\u0131nda, haf\u0131zada ayr\u0131 bir obje olu\u015fturdu, ve a ismi art\u0131k bu yeni isimden bahsediyor. b \u00fczerinde ise, herhangi bir de\u011fi\u015flik yap\u0131lmad\u0131\u011f\u0131 i\u00e7in, hala biraz \u00f6nceki \"yasar\" karakter dizisinde bahsediyor.\nPython'da her\u015fey bir objedir\nObje dedi\u011fimiz zaman, akla belli nitelikler ve fonksiyonlar k\u00fcmesi akl\u0131n\u0131za gelsin. Python'da her\u015fey bir objedir dedi\u011fimizde ise, Python'da her\u015feyin belli nitelikleri ve fonksiyonlar\u0131 vard\u0131r demek olur. \u00d6rne\u011fin, ba\u015fka bir dilde a = 5 dedi\u011finiz zaman, haf\u0131zan\u0131n bir yerinde, 5 de\u011feri tutuluyor demektir. Bu de\u011ferin herhangi bir niteli\u011fi veya fonksiyonu yoktur. a sadece bir say\u0131 de\u011ferini ifade eder. Python'da ise, a = 5 dedi\u011fimizde, bir say\u0131 objesi olu\u015ftururuz. Python'da, int objelerinin bit_length isimli bir fonksiyonu var (teknik olarak buna fonksiyon yerine method demek gerekir, ancak, \u015fu anda kafa kar\u0131\u015ft\u0131rmaya gerek yok.) \u00d6rne\u011fin, a.bit_length() ile, bu int objesini, binary olarak ifade etmek i\u00e7in, ka\u00e7 bit gerekir \u00f6\u011frenebiliriz.\nPython'da, normalde obje olmas\u0131n\u0131 beklemeseniz bile, her\u015fey bir objedir, fonksiyonlar, s\u0131n\u0131flar, hatta mod\u00fcller bile bir objedir.\nObjeler Python'da birinci s\u0131n\u0131f vatanda\u015f oldu\u011fu i\u00e7in, her objeyi \u00e7al\u0131\u015fma an\u0131nda olu\u015fturabilir, silebilir, fonksiyona arg\u00fcman olarak verebilir veya fonksiyondan d\u00f6nd\u00fcrebilirsiniz. \u00d6rne\u011fin, Python'da arg\u00fcman olarak bir mod\u00fcl al\u0131p s\u0131n\u0131f d\u00f6nd\u00fcren bir fonksiyon gayet rahatl\u0131kla yaz\u0131labilir. Ba\u015fka dillere al\u0131\u015ft\u0131ysan\u0131z, bu biraz manyak\u00e7a gelebilir, ama al\u0131\u015fkanl\u0131k yapar.\nYard\u0131m Alma\nPython'da help(obje) fonksiyonunu, herhangi bir obje ile \u00e7a\u011f\u0131rd\u0131\u011f\u0131n\u0131zda, o obje hakk\u0131nda yard\u0131m alabilirsiniz.\nBir di\u011fer y\u00f6ntem de pydoc mod\u00fcl\u00fcn\u00fc kullanmak. pydoc mod\u00fcl\u00fcn\u00fc \u00e7al\u0131\u015ft\u0131rma y\u00f6ntemi, s\u00fcr\u00fcmler aras\u0131 farkl\u0131l\u0131k g\u00f6sterebilir. Ben, 3.4'de python -m pydoc -b ile, 2.7'de ise, python -m pydoc -p 9090 ile server'\u0131 \u00e7al\u0131\u015ft\u0131r\u0131p, browser'da http://localhost:9090 adresine giderek pydoc'a ula\u015fabiliyorum.\nYaln\u0131z, Bunlardan faydalanmak i\u00e7in, biraz \u0130ngilizce bilgisine ihtiya\u00e7 duyacaks\u0131n\u0131z.\nKonu \u00c7al\u0131\u015fma\nE\u011fer yukar\u0131da bahsetti\u011fim noktalar\u0131 anlad\u0131ysan\u0131z, Python'un \u00e7al\u0131\u015fma yap\u0131s\u0131n\u0131 genel olarak anlad\u0131n\u0131z demektir. Bundan sonra, konu \u00e7al\u0131\u015farak, Python bilginizi geli\u015ftirmeye ihtiya\u00e7 duyacaks\u0131n\u0131z. Bunun i\u00e7in, \u00f6zellikle T\u00fcrk\u00e7e d\u00f6k\u00fcmantasyon kullanmak isteyenler i\u00e7in, \u0130stihza belgelerinden faydalan\u0131n derim.\nE\u011fer \u0130stihza belgelerini takip edecekseniz, \u00f6ncelikle temel bilgiler k\u0131sm\u0131na g\u00f6z at\u0131n derim. Py2.7 s\u00fcr\u00fcm\u00fcnde, birinci k\u0131s\u0131m, Py3.3 s\u00fcr\u00fcm\u00fcnde ise, ilk 12 k\u0131s\u0131m, temel bilgilerden bahsediyor. Bence bu k\u0131sm\u0131 sat\u0131r sat\u0131r okumaya gerek yok, alt ba\u015fl\u0131klara g\u00f6z gezdirin ve ihtiya\u00e7 duyaca\u011f\u0131n\u0131z k\u0131s\u0131mlar\u0131 okuyun.\nDaha sonra, ko\u015fullu durumlar, i\u015fle\u00e7ler, d\u00f6ng\u00fcler, karakter dizileri ve temel metotlar\u0131 (replace, split, endswith, startswith, join) listeler, demetler ve bunlar\u0131n metotlar\u0131, temel dosya i\u015flemleri, bu noktada Py3 i\u00e7in byte'lar ve byte dizileri, s\u00f6zl\u00fckler ve metotlar\u0131, fonksiyonlar (Py2 belgelerinde), mod\u00fcller (Py2 belgelerinde) ve nesne tabanl\u0131 programlama (Py2 belgelerinde) k\u0131s\u0131mlar\u0131n\u0131 iyice \u00f6\u011frenin.\nDikkat ederseniz, baz\u0131 k\u0131s\u0131mlar\u0131 atlad\u0131m. Bence atlad\u0131\u011f\u0131m k\u0131s\u0131mlar\u0131 konu ba\u015fl\u0131klar\u0131yla bilseniz yeterli. Bu k\u0131s\u0131mlar\u0131 referans materyali olarak, ba\u015f\u0131n\u0131z s\u0131k\u0131\u015ft\u0131k\u00e7a kullan\u0131n.\nAlan Se\u00e7me\nE\u011fer bu rehberi takip ederek \u00e7al\u0131\u015fm\u0131\u015fsan\u0131z, \u015fu ana kadar geldi\u011finiz noktada \u00f6\u011frendikleriniz, Python ile ne yapacak olursan\u0131z olun, bilmeniz gereken kavramlard\u0131. Art\u0131k, hangi alanda ilerlemek istedi\u011finize karar vermeniz gerekiyor. Python kullan\u0131m alanlar\u0131 yaz\u0131s\u0131nda, Python ile \u00e7al\u0131\u015f\u0131lan farkl\u0131 alanlardan biraz bahsetmi\u015ftim. Art\u0131k bu noktada, sizin de uzmanla\u015fmak istedi\u011finiz alana g\u00f6re, temel ara\u00e7lar\u0131 \u00f6\u011frenmeniz gerekiyor. Bu bir aray\u00fcz geli\u015ftirme k\u00fct\u00fcphanesi, Web \u00e7at\u0131s\u0131, bilimsel k\u00fct\u00fcphaneler vs. olabilir. Gerisi size kalm\u0131\u015f.\nArt\u0131k uzun s\u00fcreli geli\u015fim s\u00fcrecine girdi\u011finiz i\u00e7in, bu s\u00fcrecin ucu a\u00e7\u0131k. Ne tarafa istiyorsan\u0131z, o tarafa gidebilirsiniz.\nPaketleme ve Da\u011f\u0131t\u0131m\nArt\u0131k alan\u0131n\u0131zda uzman oldu\u011funuza g\u00f6re, payla\u015fmak istedi\u011finiz kodlar\u0131n\u0131z olacat\u0131r. Dolay\u0131s\u0131yla, Python paketleri haz\u0131rlamay\u0131 ve bunlar\u0131 Python Paket \u0130ndeksi'ne y\u00fcklemeyi \u00f6\u011frenmeniz gerekecek. Ayr\u0131ca, git ve github ikilisi, her ne kadar Python'a \u00f6zg\u00fc olmasa da, e\u011fer Programc\u0131l\u0131\u011fa Python ile ba\u015flad\u0131ysan\u0131z, \u015fu noktada art\u0131k bilmeniz gereken iki ara\u00e7.\nPython S\u00fcr\u00fcmleri\nAn itibariyle Python'un en can s\u0131k\u0131c\u0131 noktas\u0131 olsa da, e\u011fer Python programlar\u0131n\u0131z payla\u015fmaya ba\u015flad\u0131ysan\u0131z, Python s\u00fcr\u00fcmleri aras\u0131ndaki farkl\u0131l\u0131klara da art\u0131k dikkat etmeniz gerekiyor. E\u011fer az bir \u00e7abayla, hem Py2.7, hem Py3.x s\u00fcr\u00fcmlerinde \u00e7al\u0131\u015fabilecek bir program\u0131n\u0131z varsa, gerekli d\u00fczenlemeleri yaparak, program\u0131n\u0131z\u0131n daha fazla ki\u015fiye ula\u015fmas\u0131n\u0131 sa\u011flayabilirsiniz.\nVirtualEnv\nE\u011fer farkl\u0131 s\u00fcr\u00fcmlerle \u00e7al\u0131\u015facaksan\u0131z, virtualenv olmazsa olmazlar aras\u0131nda say\u0131labilir. Bunu kullanmay\u0131 \u00f6\u011frenin. Ya da anaconda kullan\u0131n, o da g\u00fczel :)\nSonu\u00e7\nBir yaz\u0131n\u0131n daha sonuna geldim, umar\u0131m faydal\u0131 olmu\u015ftur.",
      "loc": "/posts/testing-coding-with-markdown.html",
      "title": "testing coding with markdown",
      "tags": ""
    }
  ]
}